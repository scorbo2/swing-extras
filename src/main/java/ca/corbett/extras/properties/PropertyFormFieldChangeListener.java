package ca.corbett.extras.properties;

/**
 * Can be used with AbstractProperty and all of its implementations to listen for live changes
 * on the FormField that was created by and is managed by that property. This allows you to
 * implement custom form logic on the properties dialog. For example: showing or hiding
 * FormField B based on the selected value in FormField A, or to enable/disable certain
 * FormFields based on the value(s) of some other FormField(s).
 */
public interface PropertyFormFieldChangeListener {

    /**
     * Fired by an AbstractProperty when the value of the FormField that it created and manages
     * has been modified. The supplied event object contains information about exactly which
     * field on which FormPanel was modified. The field can then be queried for its current
     * value.
     * <p>
     *     <B>IMPORTANT NOTE:</B> The given event object contains both the AbstractProperty that generated the
     *     FormField, and also the FormField itself. Keep in mind that these change events are fired while
     *     the FormPanel in question is visible and has not yet been OK'd by the user!
     *     That means, the property in question has not yet been informed of the
     *     changes made in the form field. That means, if you wish to read the current version of the FormField,
     *     you should interrogate the FormField and <B>NOT</B> the AbstractProperty! If you want to know
     *     what the value of the field was at the time that it was generated by the AbstractProperty,
     *     then query the AbstractProperty, and not the FormField.
     * </p>
     *
     * @param event Contains details about the source of the change.
     */
    void valueChanged(PropertyFormFieldValueChangedEvent event);
}
