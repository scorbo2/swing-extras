package ca.corbett.extras.properties;

import ca.corbett.forms.FormPanel;
import ca.corbett.forms.fields.FormField;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.border.BevelBorder;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by the generateDialog() method in PropertiesManager. This dialog displays
 * all the non-hidden properties managed by the PropertiesManager and allows user editing.
 * If there are more than one category of properties, a tabbed pane is generated automatically.
 * For each category, if there is more than one subcategory, header labels will be generated
 * on the FormPanel as needed. Basically, this provides a very easy way for applications
 * to expose their properties in a simple but extensible way.
 * <p>
 * <b>Custom form handling</b> - it may be the case that you need to do custom form
 * handling (eg. field B should only be visible/enabled if field A contains a certain value).
 * In that case, you shouldn't go through generateDialog() in PropertiesManager, but rather
 * create the dialog yourself. This isn't as hard as it sounds... see javadocs on generateDialog()
 * for more information.</p>
 *
 * @author scorbo2
 * @since 2024-12-30
 */
public class PropertiesDialog extends JDialog {

  protected final PropertiesManager propsManager;
  protected final Frame ownerFrame;
  protected final JTabbedPane tabPane;
  protected final FormPanel formPanel;
  protected boolean wasOkayed = false;

  public PropertiesDialog(PropertiesManager manager, Frame owner, String title, JTabbedPane tabPane) {
    super(owner, title, true);
    setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    this.tabPane = tabPane;
    this.propsManager = manager;
    this.formPanel = null;
    this.ownerFrame = owner;
    setSize(640, 480);
    setMinimumSize(new Dimension(400, 360));
    initComponents();
  }

  public PropertiesDialog(PropertiesManager manager, Frame owner, String title, FormPanel panel) {
    super(owner, title, true);
    this.tabPane = null;
    this.formPanel = panel;
    this.propsManager = manager;
    this.ownerFrame = owner;
    setSize(640, 480);
    setMinimumSize(new Dimension(400, 360));
    initComponents();
  }

  /**
   * Overridden to update our position if the owner window moves.
   *
   * @param visible Whether to show or hide the dialog.
   */
  @Override
  public void setVisible(boolean visible) {
    if (visible) {
      setLocationRelativeTo(ownerFrame);
    }
    super.setVisible(visible);
  }

  /**
   * Reports whether this dialog was closed via the OK button, meaning that the form
   * was validated and all values are acceptable.
   *
   * @return true if the form was validated and closed via the OK button, false otherwise.
   */
  public boolean wasOkayed() {
    return wasOkayed;
  }

  /**
   * Returns the FormField with the given identifier it it exists on this dialog.
   *
   * @param identifier The string identifier of the field in question.
   * @return A FormField instance representing that field, or null if not found.
   */
  public FormField findFormField(String identifier) {
    List<FormField> allFields = new ArrayList<>();

    if (formPanel != null) {
      allFields.addAll(formPanel.getFormFields());
    }

    else {
      for (int i = 0; i < tabPane.getTabCount(); i++) {
        allFields.addAll(((FormPanel)tabPane.getComponentAt(i)).getFormFields());
      }
    }

    for (FormField field : allFields) {
      if (field.getIdentifier() != null && field.getIdentifier().equals(identifier)) {
        return field;
      }
    }

    return null;
  }

  /**
   * A static convenience method to generate a JScrollPane with more sensible default values.
   * Seriously, why is the default behaviour to scroll 1 pixel at a time when you mouse wheel?
   *
   * @param component Any Component that needs scrolling.
   * @return A JScrollPane that won't take a million years to scroll through.
   */
  public static JScrollPane buildScrollPane(Component component) {
    return buildScrollPane(component, 24);
  }

  /**
   * A static convenience method to generate a JScrollPane with more sensible default values.
   * Seriously, why is the default behaviour to scroll 1 pixel at a time when you mouse wheel?
   *
   * @param component     Any Component that needs scrolling.
   * @param unitIncrement How much to scroll by (I believe this is a pixel value).
   * @return A JScrollPane that won't take a million years to scroll through.
   */
  public static JScrollPane buildScrollPane(Component component, int unitIncrement) {
    JScrollPane scrollPane = new JScrollPane(component);
    scrollPane.getVerticalScrollBar().setUnitIncrement(unitIncrement);
    scrollPane.getHorizontalScrollBar().setUnitIncrement(unitIncrement);
    return scrollPane;
  }

  protected void validateFormAndClose() {
    // If we're wrapping a single FormPanel, validate it:
    if (formPanel != null) {
      if (!formPanel.isFormValid()) {
        return;
      }
    }

    // If we're wrapping a tab pane, validate all the forms:
    else {
      int firstTabWithErrors = -1;
      for (int i = 0; i < tabPane.getTabCount(); i++) {
        FormPanel form = (FormPanel)tabPane.getComponentAt(i);
        if (!form.isFormValid()) {
          if (firstTabWithErrors == -1) {
            firstTabWithErrors = i;
          }
        }
      }

      // If any of them had errors, switch to the first failed one and we're done.
      if (firstTabWithErrors != -1) {
        tabPane.setSelectedIndex(firstTabWithErrors);
        return;
      }
    }

    // If we get here, all forms are valid:
    wasOkayed = true;
    propsManager.updateFromDialog(this);
    dispose();
  }

  protected void initComponents() {
    setLayout(new BorderLayout());
    add((formPanel == null) ? tabPane : buildScrollPane(formPanel), BorderLayout.CENTER);
    add(buildButtonPanel(), BorderLayout.SOUTH);
  }

  protected JPanel buildButtonPanel() {
    JPanel panel = new JPanel();
    panel.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
    panel.setLayout(new FlowLayout(FlowLayout.RIGHT));
    JButton btn = new JButton("OK");
    btn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        validateFormAndClose();
      }

    });
    btn.setPreferredSize(new Dimension(95, 24));
    panel.add(btn);

    btn = new JButton("Cancel");
    btn.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        wasOkayed = false;
        dispose();
      }

    });
    btn.setPreferredSize(new Dimension(95, 24));
    panel.add(btn);

    return panel;
  }

}
